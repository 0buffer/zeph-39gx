<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\obj\39gs.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\obj\39gs.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Sun Jan 24 16:02:14 2016
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9]">Reset_Handler</a>
 <LI><a href="#[59]">__user_initial_stackheap</a>
 <LI><a href="#[92]">SET_IF</a>
 <LI><a href="#[93]">WR_IF</a>
 <LI><a href="#[94]">CLR_IF</a>
 <LI><a href="#[49]">MMU_EnableICache</a>
 <LI><a href="#[3e]">MMU_DisableICache</a>
 <LI><a href="#[4a]">MMU_EnableDCache</a>
 <LI><a href="#[3d]">MMU_DisableDCache</a>
 <LI><a href="#[47]">MMU_EnableAlignFault</a>
 <LI><a href="#[95]">MMU_DisableAlignFault</a>
 <LI><a href="#[48]">MMU_EnableMMU</a>
 <LI><a href="#[41]">MMU_DisableMMU</a>
 <LI><a href="#[96]">MMU_SetFastBusMode</a>
 <LI><a href="#[97]">MMU_SetAsyncBusMode</a>
 <LI><a href="#[44]">MMU_SetTTBase</a>
 <LI><a href="#[45]">MMU_SetDomain</a>
 <LI><a href="#[98]">MMU_InvalidateIDCache</a>
 <LI><a href="#[40]">MMU_InvalidateICache</a>
 <LI><a href="#[99]">MMU_InvalidateICacheMVA</a>
 <LI><a href="#[9a]">MMU_PrefetchICacheMVA</a>
 <LI><a href="#[9b]">MMU_InvalidateDCache</a>
 <LI><a href="#[9c]">MMU_InvalidateDCacheMVA</a>
 <LI><a href="#[9d]">MMU_CleanDCacheMVA</a>
 <LI><a href="#[9e]">MMU_CleanInvalidateDCacheMVA</a>
 <LI><a href="#[9f]">MMU_CleanDCacheIndex</a>
 <LI><a href="#[3f]">MMU_CleanInvalidateDCacheIndex</a>
 <LI><a href="#[a0]">MMU_WaitForInterrupt</a>
 <LI><a href="#[42]">MMU_InvalidateTLB</a>
 <LI><a href="#[a1]">MMU_InvalidateITLB</a>
 <LI><a href="#[a2]">MMU_InvalidateITLBMVA</a>
 <LI><a href="#[a3]">MMU_InvalidateDTLB</a>
 <LI><a href="#[a4]">MMU_InvalidateDTLBMVA</a>
 <LI><a href="#[a5]">MMU_SetDCacheLockdownBase</a>
 <LI><a href="#[a6]">MMU_SetICacheLockdownBase</a>
 <LI><a href="#[a7]">MMU_SetDTLBLockdown</a>
 <LI><a href="#[a8]">MMU_SetITLBLockdown</a>
 <LI><a href="#[46]">MMU_SetProcessId</a>
 <LI><a href="#[a]">Undef_Handler</a>
 <LI><a href="#[b]">SWI_Handler</a>
 <LI><a href="#[c]">PAbt_Handler</a>
 <LI><a href="#[d]">DAbt_Handler</a>
 <LI><a href="#[e]">IRQ_Handler</a>
 <LI><a href="#[f]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">Undef_Handler</a><BR>
 <LI><a href="#[b]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SWI_Handler</a><BR>
 <LI><a href="#[c]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PAbt_Handler</a><BR>
 <LI><a href="#[d]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">DAbt_Handler</a><BR>
 <LI><a href="#[f]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">FIQ_Handler</a><BR>
 <LI><a href="#[32]">Delayus</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">Delayus</a><BR>
 <LI><a href="#[24]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">DAbt_Handler</a> from s3c2410a.o(RESET) referenced from s3c2410a.o(RESET)
 <LI><a href="#[f]">FIQ_Handler</a> from s3c2410a.o(RESET) referenced from s3c2410a.o(RESET)
 <LI><a href="#[33]">IRQ_Dummy</a> from interrupt.o(.text) referenced 2 times from interrupt.o(.text)
 <LI><a href="#[e]">IRQ_Handler</a> from s3c2410a.o(RESET) referenced from s3c2410a.o(RESET)
 <LI><a href="#[c]">PAbt_Handler</a> from s3c2410a.o(RESET) referenced from s3c2410a.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from s3c2410a.o(RESET) referenced from s3c2410a.o(RESET)
 <LI><a href="#[b]">SWI_Handler</a> from s3c2410a.o(RESET) referenced from s3c2410a.o(RESET)
 <LI><a href="#[4c]">Tim4_IntHandler</a> from timer.o(.text) referenced from timer.o(.text)
 <LI><a href="#[a]">Undef_Handler</a> from s3c2410a.o(RESET) referenced from s3c2410a.o(RESET)
 <LI><a href="#[13]">__main</a> from __main.o(!!!main) referenced from s3c2410a.o(RESET)
 <LI><a href="#[12]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[11]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, s3c2410a.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> s3c2410a.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[14]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[16]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[60]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[17]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[61]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[51]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[18]"></a>_printf_u</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[62]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[1d]"></a>__rt_lib_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[63]"></a>__rt_lib_init_alloca_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[64]"></a>__rt_lib_init_argv_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[65]"></a>__rt_lib_init_atexit_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[66]"></a>__rt_lib_init_clock_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[67]"></a>__rt_lib_init_cpp_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[68]"></a>__rt_lib_init_exceptions_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[69]"></a>__rt_lib_init_fp_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[6a]"></a>__rt_lib_init_fp_trap_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[6b]"></a>__rt_lib_init_getenv_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[6c]"></a>__rt_lib_init_heap_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[6d]"></a>__rt_lib_init_lc_collate_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[6f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[70]"></a>__rt_lib_init_lc_numeric_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[71]"></a>__rt_lib_init_lc_time_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[72]"></a>__rt_lib_init_rand_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[73]"></a>__rt_lib_init_return</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[74]"></a>__rt_lib_init_signal_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[75]"></a>__rt_lib_init_stdio_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[76]"></a>__rt_lib_init_user_alloc_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[22]"></a>__rt_lib_shutdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[77]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[78]"></a>__rt_lib_shutdown_heap_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[79]"></a>__rt_lib_shutdown_return</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[7a]"></a>__rt_lib_shutdown_signal_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[7b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[7c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[15]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[7d]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1a]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1c]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[7e]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1e]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[5b]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[21]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[80]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[23]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[25]"></a>itoa</STRONG> (ARM, 212 bytes, Stack size 64 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (ARM, 96 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = main &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim4_Start
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim4_Init
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_String
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CInit
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[59]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, s3c2410a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[31]"></a>Delay</STRONG> (ARM, 40 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>Delayus</STRONG> (ARM, 12 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteDat
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>

<P><STRONG><a name="[33]"></a>IRQ_Dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interrupt.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>IRQ_Init</STRONG> (ARM, 52 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>IRQ_RegISR</STRONG> (ARM, 20 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim4_Init
</UL>

<P><STRONG><a name="[81]"></a>IRQ_UnregISR</STRONG> (ARM, 24 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>IRQ_Mask</STRONG> (ARM, 24 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>IRQ_Unmask</STRONG> (ARM, 24 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim4_Init
</UL>

<P><STRONG><a name="[34]"></a>LCD_WriteDat</STRONG> (ARM, 152 bytes, Stack size 16 bytes, hwlcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WriteDat
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[35]"></a>LCD_IOInit</STRONG> (ARM, 128 bytes, Stack size 0 bytes, hwlcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[2b]"></a>LCD_Init</STRONG> (ARM, 348 bytes, Stack size 8 bytes, hwlcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Init &rArr; LCD_WriteDat
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IOInit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteDat
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>LCD_Clear</STRONG> (ARM, 32 bytes, Stack size 0 bytes, hwlcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>LCD_CInit</STRONG> (ARM, 96 bytes, Stack size 0 bytes, hwlcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>LCD_Point</STRONG> (ARM, 88 bytes, Stack size 0 bytes, hwlcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_ASCII_5X7_Chr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Circle
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_YLine
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_XLine
</UL>

<P><STRONG><a name="[36]"></a>LCD_XLine</STRONG> (ARM, 84 bytes, Stack size 20 bytes, hwlcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rect
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
</UL>

<P><STRONG><a name="[38]"></a>LCD_YLine</STRONG> (ARM, 84 bytes, Stack size 20 bytes, hwlcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rect
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
</UL>

<P><STRONG><a name="[39]"></a>LCD_Line</STRONG> (ARM, 328 bytes, Stack size 40 bytes, hwlcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_YLine
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_XLine
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Point
</UL>

<P><STRONG><a name="[3a]"></a>LCD_Circle</STRONG> (ARM, 372 bytes, Stack size 60 bytes, hwlcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Point
</UL>

<P><STRONG><a name="[3b]"></a>LCD_Rect</STRONG> (ARM, 108 bytes, Stack size 24 bytes, hwlcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_YLine
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_XLine
</UL>

<P><STRONG><a name="[3c]"></a>LCD_Display_ASCII_5X7_Chr</STRONG> (ARM, 144 bytes, Stack size 36 bytes, hwlcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_Display_ASCII_5X7_Chr
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_String
</UL>

<P><STRONG><a name="[30]"></a>LCD_String</STRONG> (ARM, 100 bytes, Stack size 24 bytes, hwlcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_String &rArr; LCD_Display_ASCII_5X7_Chr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_ASCII_5X7_Chr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>MMU_SetMTT</STRONG> (ARM, 60 bytes, Stack size 8 bytes, mmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MMU_SetMTT
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRomCacheStatus
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[28]"></a>MMU_Init</STRONG> (ARM, 360 bytes, Stack size 16 bytes, mmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MMU_Init &rArr; MMU_SetMTT
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_SetTTBase
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_SetProcessId
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_SetDomain
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_InvalidateTLB
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_InvalidateICache
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_EnableMMU
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_EnableICache
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_EnableDCache
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_EnableAlignFault
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_DisableMMU
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_DisableICache
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_DisableDCache
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_CleanInvalidateDCacheIndex
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_SetMTT
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>ChangeRomCacheStatus</STRONG> (ARM, 128 bytes, Stack size 24 bytes, mmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_InvalidateTLB
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_InvalidateICache
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_EnableMMU
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_EnableICache
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_EnableDCache
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_DisableMMU
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_DisableICache
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_DisableDCache
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_CleanInvalidateDCacheIndex
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_SetMTT
</UL>

<P><STRONG><a name="[83]"></a>fputc</STRONG> (ARM, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>fgetc</STRONG> (ARM, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>ferror</STRONG> (ARM, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>_ttywrch</STRONG> (ARM, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>_sys_exit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[4c]"></a>Tim4_IntHandler</STRONG> (ARM, 44 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Tim4_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>Tim4_Init</STRONG> (ARM, 108 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Tim4_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Unmask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_RegISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>Tim4_Start</STRONG> (ARM, 68 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__2sprintf</STRONG> (ARM, 56 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>__printf</STRONG> (ARM, 204 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[19]"></a>_printf_int_dec</STRONG> (ARM, 164 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[26]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__use_two_region_memory</STRONG> (ARM, 4 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (ARM, 4 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (ARM, 4 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>_printf_int_common</STRONG> (ARM, 296 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4f]"></a>_printf_char_common</STRONG> (ARM, 60 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[11]"></a>_sputc</STRONG> (ARM, 16 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8f]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[90]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[20]"></a>exit</STRONG> (ARM, 16 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[27]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim4_Init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>

<P><STRONG><a name="[92]"></a>SET_IF</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[93]"></a>WR_IF</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[94]"></a>CLR_IF</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[49]"></a>MMU_EnableICache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRomCacheStatus
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[3e]"></a>MMU_DisableICache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRomCacheStatus
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[4a]"></a>MMU_EnableDCache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRomCacheStatus
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[3d]"></a>MMU_DisableDCache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRomCacheStatus
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[47]"></a>MMU_EnableAlignFault</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[95]"></a>MMU_DisableAlignFault</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[48]"></a>MMU_EnableMMU</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRomCacheStatus
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[41]"></a>MMU_DisableMMU</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRomCacheStatus
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[96]"></a>MMU_SetFastBusMode</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[97]"></a>MMU_SetAsyncBusMode</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[44]"></a>MMU_SetTTBase</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[45]"></a>MMU_SetDomain</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[98]"></a>MMU_InvalidateIDCache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[40]"></a>MMU_InvalidateICache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRomCacheStatus
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[99]"></a>MMU_InvalidateICacheMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[9a]"></a>MMU_PrefetchICacheMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[9b]"></a>MMU_InvalidateDCache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[9c]"></a>MMU_InvalidateDCacheMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[9d]"></a>MMU_CleanDCacheMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[9e]"></a>MMU_CleanInvalidateDCacheMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[9f]"></a>MMU_CleanDCacheIndex</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[3f]"></a>MMU_CleanInvalidateDCacheIndex</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRomCacheStatus
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[a0]"></a>MMU_WaitForInterrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[42]"></a>MMU_InvalidateTLB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRomCacheStatus
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>

<P><STRONG><a name="[a1]"></a>MMU_InvalidateITLB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[a2]"></a>MMU_InvalidateITLBMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[a3]"></a>MMU_InvalidateDTLB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[a4]"></a>MMU_InvalidateDTLBMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[a5]"></a>MMU_SetDCacheLockdownBase</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[a6]"></a>MMU_SetICacheLockdownBase</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[a7]"></a>MMU_SetDTLBLockdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[a8]"></a>MMU_SetITLBLockdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code), UNUSED)

<P><STRONG><a name="[46]"></a>MMU_SetProcessId</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 2410slib.o(C$$code))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, s3c2410a.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3c2410a.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, s3c2410a.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3c2410a.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, s3c2410a.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3c2410a.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, s3c2410a.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3c2410a.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, s3c2410a.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> s3c2410a.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, s3c2410a.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3c2410a.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[5d]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[5c]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[5f]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[12]"></a>_printf_input_char</STRONG> (ARM, 20 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[5a]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[57]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[56]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[52]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[53]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
